<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ctrl="clr-namespace:Frosty.Controls;assembly=FrostyControls"
                    xmlns:editors="clr-namespace:LevelEditorPlugin.Editors"
                    xmlns:core="clr-namespace:Frosty.Core.Controls;assembly=FrostyCore"
                    xmlns:conv="clr-namespace:LevelEditorPlugin.Converters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/FrostyControls;component/Themes/Generic.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <SolidColorBrush x:Key="CanvasBackground" Color="#141414"/>
    <SolidColorBrush x:Key="CanvasGridMajor" Color="#000000"/>
    <SolidColorBrush x:Key="CanvasGridMinor" Color="#242424"/>
    
    <Style TargetType="{x:Type TreeViewItem}" x:Key="StrechedTreeViewItemStyle">
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Grid Column="0" ColumnSpan="3">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Label Name="Bd" Grid.Column="1" Grid.ColumnSpan="3" Margin="-10000,0,0,0" Background="{Binding Path=Background, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}" />
                            <ToggleButton Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}">
                                <Control.Template>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Border Background="#00FFFFFF" Height="16" Padding="5" Width="16">
                                            <Path Name="ExpandPath" Fill="{StaticResource ControlPressed}" Stroke="{StaticResource ControlPressed}">
                                                <Path.Data>
                                                    <PathGeometry Figures="M0,0 L0,6 L6,0 z" />
                                                </Path.Data>
                                                <UIElement.RenderTransform>
                                                    <RotateTransform Angle="135" CenterY="3" CenterX="3" />
                                                </UIElement.RenderTransform>
                                            </Path>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                <Setter TargetName="ExpandPath" Property="RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="180" CenterY="3" CenterX="3" />
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Control.Template>
                            </ToggleButton>
                            <Border Grid.Column="1" Grid.ColumnSpan="2" BorderThickness="0" SnapsToDevicePixels="True" Height="22" HorizontalAlignment="Stretch">
                                <ContentPresenter Name="PART_Header" ContentSource="Header" HorizontalAlignment="Stretch"/>
                            </Border>
                            <FrameworkElement.Style>
                                <Style TargetType="{x:Type Grid}">
                                    <Setter Property="Background" Value="#00FFFFFF" />
                                    <Style.Triggers>
                                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="#303030" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </FrameworkElement.Style>
                        </Grid>
                        <ItemsPresenter Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TreeViewItem.IsExpanded" Value="False">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="TreeViewItem.IsSelected" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource SubItemPressed}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TreeViewItem}" x:Key="ThemelessTreeViewItemStyle">
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Grid>
                            
                            <Label Name="Bd" Margin="0,0,0,0" Background="{Binding Path=Background, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}" />
                            <Border BorderThickness="0" SnapsToDevicePixels="True" Height="22">
                                <ContentPresenter Name="PART_Header" ContentSource="Header" />
                            </Border>
                            
                            <FrameworkElement.Style>
                                <Style TargetType="{x:Type Grid}">
                                    <Setter Property="Background" Value="#00FFFFFF" />
                                    <Style.Triggers>
                                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="#303030" />
                                            <Setter Property="Opacity" Value="0.5" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </FrameworkElement.Style>
                        </Grid>
                        
                        <ItemsPresenter Name="ItemsHost" Grid.Row="1" />
                        
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TreeViewItem.IsExpanded" Value="False">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="TreeViewItem.IsSelected" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource SubItemPressed}" />
                            <Setter TargetName="Bd" Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="tabControlStyle" TargetType="{x:Type ctrl:FrostyTabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:FrostyTabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>

                        <StackPanel>
                            <!-- Dockable Window Deco -->
                            <StackPanel x:Name="DockableBar" Height="13">
                                <Border Background="#232323" Height="11"/>
                                <Border Background="#1a1a1a" Height="1"/>
                                <Border Background="#2f2f2f" Height="1"/>
                            </StackPanel>

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="14"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <Grid Width="14" Height="20">
                                    <Border Background="#292929"/>
                                    <Path x:Name="dockingDeco" Data="{Binding Source={StaticResource DockingDeco}, Path=Data}" Height="20" Width="14" Fill="#454545" Margin="0,0,0,0" RenderTransformOrigin="0.5,0.5">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform/>
                                                <TranslateTransform Y="-1"/>
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>

                                <ScrollViewer x:Name="PART_ScrollViewer" Grid.Column="1" IsTabStop="False" VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Hidden" BorderThickness="0" Padding="0" Margin="0,0,0,-1">
                                    <TabPanel x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="-1,0,0,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                                </ScrollViewer>

                                <Border Grid.Column="2">
                                    <RepeatButton Content="&lt;" x:Name="PART_ScrollLeft" Width="21">
                                        <RepeatButton.Template>
                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                <Border Background="{StaticResource ScrollbarBackground}">
                                                    <Border x:Name="border" Background="{StaticResource ControlBackground}" Margin="1">
                                                        <Polygon Points="0,0 3.5,3.5 3.5,-3.5" Stroke="{StaticResource ButtonImage}" Fill="{StaticResource ButtonImage}" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="7,10,0,0"/>
                                                    </Border>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Background" TargetName="border" Value="{StaticResource ControlHighlight}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsPressed" Value="True">
                                                        <Setter Property="Background" TargetName="border" Value="{StaticResource ControlPressed}"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </RepeatButton.Template>
                                    </RepeatButton>
                                </Border>

                                <Border Grid.Column="3">
                                    <RepeatButton Content="&gt;" x:Name="PART_ScrollRight" Width="21">
                                        <RepeatButton.Template>
                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                <Border Background="{StaticResource ScrollbarBackground}">
                                                    <Border x:Name="border" Background="{StaticResource ControlBackground}" Margin="1">
                                                        <Polygon Points="0,0 -3.5,3.5 -3.5,-3.5" Stroke="{StaticResource ButtonImage}" Fill="{StaticResource ButtonImage}" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="12,10,0,0"/>
                                                    </Border>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Background" TargetName="border" Value="{StaticResource ControlHighlight}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsPressed" Value="True">
                                                        <Setter Property="Background" TargetName="border" Value="{StaticResource ControlPressed}"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </RepeatButton.Template>
                                    </RepeatButton>
                                </Border>
                            </Grid>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
                            <!--<Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>-->
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InvisibleComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Foreground" Value="{StaticResource FontColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border BorderBrush="#868686" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent">
                        <Grid Name="templateRoot" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="19" />
                            </Grid.ColumnDefinitions>
                            <Popup Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" Margin="1" Placement="Bottom" Focusable="False" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <Border Name="dropDownBorder" MaxHeight="200" Width="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ScrollViewer Name="DropDownScrollViewer">
                                        <Grid Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle Margin="0 0 0 0" Name="opaqueRect" Fill="{StaticResource ListBackground}" Stroke="Black" StrokeThickness="1" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                                            </Canvas>
                                            <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                            <ToggleButton Name="toggleButton" Grid.Column="1" VerticalAlignment="Stretch" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <Control.Template>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Border Name="border" Margin="1" Background="{StaticResource ControlBackground}">
                                            <Path Width="17" Height="17" Fill="#FFFFFFFF" Data="M5,6 L5,6 L13,6 L9,11" />
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="UIElement.IsMouseOver" Value="True">
                                                <Setter TargetName="border" Property="Background" Value="{StaticResource ControlHighlight}" />
                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter TargetName="border" Property="Background" Value="{StaticResource ControlPressed}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Control.Template>
                            </ToggleButton>
                            <ToggleButton Name="invisToggleButton" Focusable="False" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <Control.Template>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Border Background="#00FFFFFF" />
                                    </ControlTemplate>
                                </Control.Template>
                            </ToggleButton>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="BaseEditor" TargetType="{x:Type editors:ToolbarAssetEditor}">
        <Style.Resources>

            <!-- Default toolbar item -->
            <DataTemplate x:Key="DefaultToolbarItem" DataType="{x:Type core:ToolbarItem}">
                <Button Margin="4,0,0,0" Height="20" ToolTip="{Binding Path=ToolTip}" Command="{Binding Path=Command}">
                    <StackPanel Name="panel" Margin="4 0 4 0" Orientation="Horizontal">
                        <Image Name="icon" Width="16" Source="{Binding Path=Icon}" />
                        <TextBlock Name="text" Margin="4,0,0,0" Text="{Binding Path=Text}" />
                    </StackPanel>
                </Button>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=Icon}" Value="{x:Null}">
                        <Setter TargetName="icon" Property="Visibility" Value="Collapsed" />
                        <Setter TargetName="text" Property="Margin" Value="0" />
                    </DataTrigger>
                    <DataTrigger Value="" Binding="{Binding Path=Text}">
                        <Setter TargetName="text" Property="Margin" Value="0" />
                        <Setter TargetName="panel" Property="Margin" Value="0" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <!-- Same as default but icon can be specified from plugin or application -->
            <DataTemplate x:Key="RegularToolbarItem" DataType="{x:Type editors:RegularToolbarItem}">
                <Button Margin="4,0,0,0" Height="20" ToolTip="{Binding Path=ToolTip}" Command="{Binding Path=Command}">
                    <StackPanel Name="panel" Margin="4 0 4 0" Orientation="Horizontal">
                        <Image Name="icon" Width="16" Source="{Binding Path=NewIcon}" />
                        <TextBlock Name="text" Margin="4,0,0,0" Text="{Binding Path=Text}" />
                    </StackPanel>
                </Button>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=NewIcon}" Value="{x:Null}">
                        <Setter TargetName="icon" Property="Visibility" Value="Collapsed" />
                        <Setter TargetName="text" Property="Margin" Value="0" />
                    </DataTrigger>
                    <DataTrigger Value="" Binding="{Binding Path=Text}">
                        <Setter TargetName="text" Property="Margin" Value="0" />
                        <Setter TargetName="panel" Property="Margin" Value="0" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <!-- Toolbar item that can be toggled with various docking positions -->
            <DataTemplate x:Key="DockingToolbarItem" DataType="{x:Type editors:DockingToolbarItem}">
                <Grid Margin="4,0,0,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="22"/>
                        <ColumnDefinition Width="19"/>
                    </Grid.ColumnDefinitions>

                    <ComboBox Grid.ColumnSpan="2" SelectedIndex="{Binding Path=SelectedDockIndex}" Style="{StaticResource InvisibleComboBox}">
                        <ComboBoxItem>
                            <Image Source="/LevelEditorPlugin;component/Images/TopLeft.png" Width="28" ToolTip="Dock to top left"/>
                        </ComboBoxItem>
                        <ComboBoxItem>
                            <Image Source="/LevelEditorPlugin;component/Images/BottomLeft.png" Width="28" ToolTip="Dock to bottom left"/>
                        </ComboBoxItem>
                        <ComboBoxItem>
                            <Image Source="/LevelEditorPlugin;component/Images/TopRight.png" Width="28" ToolTip="Dock to top right"/>
                        </ComboBoxItem>
                        <ComboBoxItem>
                            <Image Source="/LevelEditorPlugin;component/Images/BottomRight.png" Width="28" ToolTip="Dock to bottom right"/>
                        </ComboBoxItem>
                        <ComboBoxItem>
                            <Image Source="/LevelEditorPlugin;component/Images/Bottom.png" Width="28" ToolTip="Dock to bottom center"/>
                        </ComboBoxItem>
                        <ComboBoxItem>
                            <Image Source="/LevelEditorPlugin;component/Images/Float.png" Width="28" ToolTip="Float"/>
                        </ComboBoxItem>
                    </ComboBox>
                    <ToggleButton Margin="0 1 0 1" ToolTip="{Binding Path=ToolTip}" Command="{Binding Path=CommandToInvoke}" CommandParameter="{Binding Path=.}" IsChecked="{Binding Path=IsToggled}" >
                        <StackPanel Name="panel" Margin="4 -1 4 -1" Orientation="Horizontal" >
                            <Image Name="icon" Width="16" Source="{Binding Path=NewIcon}" />
                            <TextBlock Name="text" Margin="4,0,0,0" Text="{Binding Path=Text}" />
                        </StackPanel>
                    </ToggleButton>

                </Grid>

                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=NewIcon}" Value="{x:Null}">
                        <Setter TargetName="icon" Property="Visibility" Value="Collapsed" />
                        <Setter TargetName="text" Property="Margin" Value="0" />
                    </DataTrigger>
                    <DataTrigger Value="" Binding="{Binding Path=Text}">
                        <Setter TargetName="text" Property="Margin" Value="0" />
                        <Setter TargetName="panel" Property="Margin" Value="0" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <!-- Toolbar item that can be toggled, but only allows floating docking -->
            <DataTemplate x:Key="FloatingOnlyDockingToolbarItem" DataType="{x:Type editors:FloatingOnlyDockingToolbarItem}">
                <Grid Margin="4,0,0,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="22"/>
                    </Grid.ColumnDefinitions>
                    <ToggleButton Margin="0 1 0 1" ToolTip="{Binding Path=ToolTip}" Command="{Binding Path=CommandToInvoke}" CommandParameter="{Binding Path=.}" IsChecked="{Binding Path=IsToggled}" >
                        <StackPanel Name="panel" Margin="4 -1 4 -1" Orientation="Horizontal" >
                            <Image Name="icon" Width="16" Source="{Binding Path=NewIcon}" />
                            <TextBlock Name="text" Margin="4,0,0,0" Text="{Binding Path=Text}" />
                        </StackPanel>
                    </ToggleButton>

                </Grid>

                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=NewIcon}" Value="{x:Null}">
                        <Setter TargetName="icon" Property="Visibility" Value="Collapsed" />
                        <Setter TargetName="text" Property="Margin" Value="0" />
                    </DataTrigger>
                    <DataTrigger Value="" Binding="{Binding Path=Text}">
                        <Setter TargetName="text" Property="Margin" Value="0" />
                        <Setter TargetName="panel" Property="Margin" Value="0" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <!-- Standard toggleable toolbar item -->
            <DataTemplate x:Key="ToggleToolbarItem" DataType="{x:Type editors:ToggleToolbarItem}">
                <Grid Margin="4,0,0,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="22"/>
                    </Grid.ColumnDefinitions>
                    <ToggleButton Margin="0 1 0 1" ToolTip="{Binding Path=ToolTip}" Command="{Binding Path=Command}" CommandParameter="{Binding Path=.}" IsChecked="{Binding Path=IsToggled}" >
                        <StackPanel Name="panel" Margin="4 -1 4 -1" Orientation="Horizontal" >
                            <Image Name="icon" Width="16" Source="{Binding Path=NewIcon}" />
                            <TextBlock Name="text" Margin="4,0,0,0" Text="{Binding Path=Text}" />
                        </StackPanel>
                    </ToggleButton>

                </Grid>

                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=NewIcon}" Value="{x:Null}">
                        <Setter TargetName="icon" Property="Visibility" Value="Collapsed" />
                        <Setter TargetName="text" Property="Margin" Value="0" />
                    </DataTrigger>
                    <DataTrigger Value="" Binding="{Binding Path=Text}">
                        <Setter TargetName="text" Property="Margin" Value="0" />
                        <Setter TargetName="panel" Property="Margin" Value="0" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <!-- A toolbar item for hosting a ComboBox -->
            <DataTemplate x:Key="ComboBoxToolbarItem" DataType="{x:Type editors:ComboBoxToolbarItem}">
                <DataTemplate.Resources>
                    <conv:ComboBoxNameConverter x:Key="ComboBoxNameConverter"/>
                </DataTemplate.Resources>
                <Grid Margin="4,0,0,0">
                    <ComboBox x:Name="comboBox" ToolTip="{Binding Path=ToolTip}" ItemsSource="{Binding Path=ItemsSource}" SelectedItem="{Binding Path=SelectedItem, Mode=TwoWay}" FontSize="10" MinWidth="{Binding Path=MinWidth}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock>
                                    <TextBlock.Text>
                                        <MultiBinding Converter="{StaticResource ComboBoxNameConverter}">
                                            <MultiBinding.Bindings>
                                                <Binding Path="."/>
                                                <Binding Path="DataContext.NameConverter" RelativeSource="{RelativeSource AncestorType={x:Type ComboBox}}"/>
                                            </MultiBinding.Bindings>
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>

                </Grid>

                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=ItemsSource.Count}" Value="1">
                        <Setter TargetName="comboBox" Property="IsEnabled" Value="False" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=ItemsSource.Count}" Value="0">
                        <Setter TargetName="comboBox" Property="IsEnabled" Value="False" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <!-- A toolbar item for hosting a Textbox -->
            <DataTemplate x:Key="TextBoxToolbarItem" DataType="{x:Type editors:TextBoxToolbarItem}">
                <Grid Margin="4,0,4,0" ToolTip="{Binding ToolTip}" TextBlock.Foreground="{StaticResource FontColor}">

                    <StackPanel Orientation="Horizontal">
                        <TextBlock VerticalAlignment="Center" Text="{Binding Path=Text}" Foreground="{StaticResource FontColor}"/>
                        <TextBox Margin="4 1 0 1" Text="{Binding Path=ValueText}" VerticalContentAlignment="Center" Padding="2 0" IsReadOnly="True"/>
                    </StackPanel>

                </Grid>
            </DataTemplate>

            <!-- A toolbar item for dividing content -->
            <DataTemplate x:Key="DividerToolbarItem" DataType="{x:Type editors:DividerToolbarItem}">
                <Grid Margin="4,3,4,3">

                    <Border Width="1" Background="{StaticResource FontColor}" VerticalAlignment="Stretch" Opacity="0.5"/>

                </Grid>
            </DataTemplate>

        </Style.Resources>
    </Style>
    
</ResourceDictionary>